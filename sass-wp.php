<?php
  /*
  Plugin Name: SASS & HAML for WP (test)
  Plugin URI: http://egrouse.com
  Description: Attempt to get SASS and HAML working in WordPress, using PHamlP
  Author: Ellis Grouse
  Version: 0.1
  Author URI: http://egrouse.com
  */
  
  /**
   * SASS class
   *
   * This contains all of the functions used
   * for the SASS parsing. This is instantiated
   * automatically below, and quick access functions
   * are provided.
   */
  class SASS
  {
    /**
     * class constructor
     *
     * Sets up the class - basically, loads the dependencies
     */
    function __construct()
    {
      // Incldue the SASS and Haml parsers provided with Phamlp
      require_once( 'sass/SassParser.php' );
      require_once( 'haml/HamlParser.php' );
      
      $this->sass_options   = null;
      $this->comment_shown  = true;
    }
    
    /**
     * Instantiate the SASS parser
     *
     * This loads the sass parser, using the options
     * provided. If a parser has been previously
     * loaded, it is first destroyed and a new
     * one is created ( if the options are
     * different )
     *
     * @param Array $options
     */
    function load_sass()
    { 
      // Load the SASS parser
      if( $this->sass_options == null ) $this->sass_options = Array( 'style' => 'nested' );

      // Unset the old
      if( isset( $this->sass ) ) unset( $this->sass );
      
      // …and load the new!
      $this->sass = new SassParser( $this->sass_options );
    }
    
    /**
     * Parse a SASS/SCSS file
     *
     * Parses an input file and saves it to 
     * the specified CSS file.
     *
     * @param string $input Path of the scss/sass file, absolute
     * @param string $output Desired path of the output file, absolute
     * @return string Path to the created CSS file, relative to site root
     */
    function scss_file( $input, $output )
    {
      // Load the Sass parser
      $this->load_sass(); 
      
      // Open the output file
      $file = fopen( $output, 'w' ) or die( 'Cannot open file: ' . $output );
      
      // Get the contents of the input file
      $parse_me = file_get_contents( $input );
      
      // Parse the SASS
      $css  = $this->sass->toCss( $input );
      
      // Create a relative filename to output in the comment
      $file_path  = str_replace( getcwd(), '', $input );
      
      // Create a comment, if needed
      $comment  = ( $this->comment_shown == true ) ?
"/**
 * This file was autogenerated by SASS-WP - DO NOT EDIT THIS FILE
 * Your changes will be deleted next time the page loads.
 * Instead, edit: {$file_path}
 */\n\n" : '' ;
      
      // Write to the output file and close it
      fwrite( $file, $comment . $css );
      fclose( $file );
      
      $output = str_replace( getcwd(), '', $output );
      return $output;
    }
    
    /**
     * Set SASS options
     *
     * Used to set $this->sass_options with the appropriate
     * options that are desired
     *
     * @param Array $options
     */
    function set_sass_options( $options )
      { $this->sass_options = $options; }
    
    /**
     * Disable/enable CSS comment
     *
     * Allows the user to enable or disable the comment
     * being add to the generated CSS file
     *
     * @param boolean $value True or false?
     */
    function add_comment( $value )
      { $this->comment_shown = $value; }

  }
  
  /* === FUNCTIONS === */
  
  /**
   * Parse a file
   *
   * Easier access function to parse a CSS file,
   * used the SASS global class to do it.
   *
   * @param string $input Path of the scss/sass file, relative to template
   * @param string $output Desired path of the output file, relative to template
   * @return string Path to the created CSS file, relative to site root
   */
  function scss_file( $input_file, $output_file )
  {
    // Setup the input and output paths to the correct locations
    $template_path  = get_template_directory();
    $input          = $template_path . '/' . $input_file;
    $output         = $template_path . '/' . $output_file;
    
    // Execute!
    global $SASS;
    return $SASS->scss_file( $input, $output );
  }
  
  // Instantiate our SASS class
  $SASS = new SASS();
?>